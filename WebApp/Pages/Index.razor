@page "/"
@using System.ComponentModel.DataAnnotations;
@using WebApp.Components;
@using Newtonsoft.Json;
@using WebApp.Models;
@inject HttpClient HttpClient
@inject IJSRuntime JsRuntime

<PageTitle>Usage Expertise Survey</PageTitle>
<div class="d-flex align-center justify-center">
    <div style="max-width: 800px;">

        @if (errorMessage != null)
        {
            <MudAlert Severity="Severity.Warning">@errorMessage</MudAlert>
        }

        @if (step == 0)
        {
            <Introduction OnNext="OnNext" />
        }
        else if (step == 1)
        {
            <UserInfoForm OnSubmit="OnUserInfoSubmit" />
        }
        else if (step == 2)
        {
            <SurveyAnalysisLoading Progress="_progressModel"/>
        }
        else if (step == 3)
        {
            <Survey Libraries="_importResult.LibrariesToAssess" OnSubmit="OnSurveySubmit" />
        }
        else if (step == 4)
        {
            <SurveyResult OnSubmit="OnNext" ImportResults="_importResult.Imports" />
        }
        else
        {
            <MudText Typo="Typo.h3" GutterBottom="true">Thank you for participating!</MudText>
            <MudText Typo="Typo.body1" GutterBottom="true">You may now close this window</MudText>
        }
    </div>
</div>

<MudOverlay Visible="isLoading" DarkBackground="true" Absolute="false">
    <MudProgressCircular Size="Size.Large" Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {
    private InfoModel _infoModel;
    private ImportResult _importResult;
    private SurveyModel _surveyModel;
    private AnalysisProgressModel _progressModel;
    private int step;
    private bool isLoading;
    private string? errorMessage;

    public Index()
    {
        step = 3;
        _progressModel = new();
        _importResult = new();
        _importResult.LibrariesToAssess = new List<string>() { "test1", "test2", "test3" };
    }

    async Task OnUserInfoSubmit(InfoModel infoModel)
    {
        errorMessage = null;
        step++;
        _infoModel = infoModel;
        var url = "/analyse";
        StateHasChanged();

        var responseTask = HandlePostRequest(url, infoModel);
        await WaitForAnalysisCompletion(responseTask);

        var response = responseTask.Result;


        if (response is not null)
        {
            if (response.IsSuccessStatusCode)
            {
                var str = await response.Content.ReadAsStringAsync();
                _importResult = JsonConvert.DeserializeObject<ImportResult>(str);
                step++;
            }
            else
            {
                errorMessage = response.StatusCode + " - something went wrong. Please try again";
                step = 1;
            }
        }
        else
        {
            errorMessage = "Failed getting a response from the server.";
            step = 1;
        }

        StateHasChanged();
        await ScrollToTop();
    }

    async Task OnNext()
    {
        step++;
        StateHasChanged();
        await ScrollToTop();
    }

    async Task OnSurveySubmit(SurveyModel surveyModel)
    {
        errorMessage = null;
        _surveyModel = surveyModel;
        var url = "/self-assess";
        isLoading = true;
        StateHasChanged();

        var submission = new FinalSubmitModel()
            {
                ImportToRating = surveyModel.ImportToRating,
                ImportToNote = surveyModel.ImportToNote,
                Imports = _importResult.Imports,
                Email = _infoModel.Email,
                Urls = _infoModel.Urls
            };

        var response = await HandlePostRequest(url, submission);

        isLoading = false;
        if (response is not null)
        {
            if (response.IsSuccessStatusCode)
            {
                step++;
                errorMessage = null;
            }
            else
            {
                errorMessage = response.StatusCode + " - something went wrong. Please try again";
            }
        }
        else
        {
            errorMessage = "Failed getting a response from the server.";
        }

        StateHasChanged();
        await ScrollToTop();
    }

    private async Task ScrollToTop()
    {
        await JsRuntime.InvokeVoidAsync("scrollToTop");
    }

    /// <summary>
    /// Used to handle if the Api is offline or won't connect.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="url"></param>
    /// <param name="postObject"></param>
    /// <returns>Returns null if a HttpRequestException is thrown</returns>
    private async Task<HttpResponseMessage?> HandlePostRequest<T>(string url, T postObject)
    {
        try
        {
            return await HttpClient.PostAsJsonAsync(url, postObject);
        }
        catch (HttpRequestException e)
        {
            return null;
        }
    }

    private async Task WaitForAnalysisCompletion(Task task)
    {
        while (!task.IsCompleted)
        {
            await Task.Delay(2000);

            var progressModel = await HttpClient.GetFromJsonAsync<AnalysisProgressModel>("analysis/progress/" + _infoModel.Email);
            if (progressModel is not null)
            {
                _progressModel = progressModel;
                StateHasChanged();
            }
        }
    }

}