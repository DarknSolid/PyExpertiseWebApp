@using WebApp.Models;


<MudText Typo="Typo.h3" GutterBottom="true">Library Expertise Self-Assessment</MudText>
<MudDivider Light="true" />
<MudCard>
    <MudCardHeader>
        <div class="d-flex flex-column align-center gap-2" style="width:100%;">
            <MudText Typo="Typo.h6">Library @(_step + 1) of @_libraries.Count</MudText>
            <MudProgressLinear Color="Color.Secondary" Size="Size.Large" Value="@(_progress)" Class="my-2">
            </MudProgressLinear>
            <MudText>Please rate the next @(Libraries.Count()) libraries, that you have used.</MudText>
        </div>
    </MudCardHeader>
    <MudCardContent>
        <MudText></MudText>

        <div class="d-flex flex-column">

            @if (_step < _libraries.Count)
            {
                <MudText Typo="Typo.h6">Library: @_libraries[_step]</MudText>
                <div class="d-flex">
                    <MudRadioGroup T="int" @bind-SelectedOption="_selectedOption">
                        <MudRadio Option="@(0)">I don't know what this library does</MudRadio>
                        <MudText>I know what it does:</MudText>
                        <MudRadio Option="@(1)">but <strong>can't use any</strong> of the library's functions without documentation</MudRadio>
                        <MudRadio Option="@(2)">and <strong>can use some</strong> of the library's functions without documentation</MudRadio>
                        <MudRadio Option="@(3)">and <strong>can use most</strong> of the library's functions without documentation</MudRadio>
                        <MudRadio Option="@(4)">and <strong>can use all</strong> of the library's functions without documentation</MudRadio>
                    </MudRadioGroup>
                </div>

                <MudTextField @bind-Value="_surveyModel.ImportToNote[_libraries[_step]]"
                          Variant="Variant.Filled"
                          Label="Optional Note"
                          Lines="3"
                          />
            }

        </div>

    </MudCardContent>
    <MudCardActions>
        @if(_step > 0)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Default" Class="mr-auto" OnClick="OnPreviousLibrary">Back</MudButton>
            
        }
        @if (_step < _libraries.Count - 1)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnNextLibrary">Next</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnSubmitPressed">Submit</MudButton>
        }
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public Func<SurveyModel, Task> OnSubmit { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<string> Libraries { get; set; }

    private IList<string> _libraries;

    private SurveyModel _surveyModel;
    private int _selectedOption;

    private int _step;
    private float _progress;

    public Survey()
    {
        _surveyModel = new();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _libraries = Libraries.ToList();

        UpdateProgress();

        // Initialize dicts with default values:
        foreach (string library in Libraries)
        {
            if (!_surveyModel.ImportToRating.ContainsKey(library))
            {
                _surveyModel.ImportToRating.Add(library, 0);
            }

            if (!_surveyModel.ImportToNote.ContainsKey(library))
            {
                _surveyModel.ImportToNote.Add(library, "");
            }
        }
    }

    private void OnNextLibrary()
    {
        _surveyModel.ImportToRating[_libraries[_step]] = _selectedOption;
        _step++;
        UpdateProgress();
        _selectedOption = 0;
    }

    private void OnPreviousLibrary()
    {
        _step--;
        _selectedOption = _surveyModel.ImportToRating[_libraries[_step]];
        UpdateProgress();
    }

    private void UpdateProgress()
    {
        var division = ((float)_step + 1) / _libraries.Count;
        var pct = division * 100 + 0d;

        _progress = (int)Math.Ceiling(pct);
    }

    private async Task OnSubmitPressed()
    {
        await OnSubmit(_surveyModel);
    }


}
