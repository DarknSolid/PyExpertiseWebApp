@using WebApp.Models


<MudText Typo="Typo.h3" GutterBottom="true">Python Import Analysis In Progress</MudText>
<MudDivider Light="true" />
<MudCard>
    <MudCardContent Class="d-flex flex-column align-center">
        <MudText Style="text-align:center" Align="Align.Center">Commit @Progress.Count of @Progress.Total</MudText>
        <MudProgressLinear Style="height: 40px;" Color="Color.Secondary" Striped="true" Size="Size.Large" Value="@_progressPercentage" Class="my-2">
            <MudText>@(_progressPercentage)% Eta: @_minutesLeft min. - Elapsed: @_minutesElapsed min.</MudText>
        </MudProgressLinear>
        <MudText Style="text-align:center" Align="Align.Center">Current repository: @Progress.CurrentRepositoryName</MudText>

        <MudText Class="mb-5" Style="text-align:center" Align="Align.Center"></MudText>

        <MudText Style="align-self: flex-start" Typo="Typo.h6">Identified @Repositories.Count() Python Repositories:</MudText>
        <MudTable Items="@Repositories"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  Striped="true"
                  Bordered="true">

            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Your Commits (@Repositories.Sum(r => r.UserCommits)</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name"><MudLink Target="_blanc" Href="@context.Url" Underline="Underline.Always">@context.RepositoryName</MudLink></MudTd>
                <MudTd DataLabel="Your Commits">@context.UserCommits</MudTd>
            </RowTemplate>

        </MudTable>

    </MudCardContent>
    <MudCardActions>
    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public AnalysisProgressModel Progress { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<RepositoryResult> Repositories { get; set; }

    private int _progressPercentage;
    private int _minutesLeft;
    private int _minutesElapsed;

    private DateTime? _start;

    public SurveyAnalysisLoading()
    {
        _start = null;
    }

    private void UpdateProgressPercentage()
    {
        if (Progress.Count == Progress.Total)
        {
            return;
        }
        else if (_start == null)
        {
            _start = DateTime.Now;
        }

        if (Progress.Total == 0 || Progress.Count == 0)
        {
            _progressPercentage = 0;
            return;
        }

        var division = ((float)Progress.Count) / Progress.Total;
        var pct = division * 100 + 0d;

        _progressPercentage = (int)Math.Ceiling(pct);

        var elapsed = DateTime.Now - _start;
        _minutesElapsed = (int)Math.Floor(elapsed.Value.TotalMinutes);

        var secondsElapsed = elapsed.Value.TotalSeconds;
        var percentagePerSecond = _progressPercentage / secondsElapsed;
        var percentageLeft = 100 - _progressPercentage;
        _minutesLeft = (int)Math.Ceiling(percentageLeft / percentagePerSecond + 0d);
        _minutesLeft = (int)Math.Ceiling(_minutesLeft / 60d);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateProgressPercentage();
        StateHasChanged();
    }
}
