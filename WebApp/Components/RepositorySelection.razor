@using Newtonsoft.Json;
@using WebApp.Models;
@inject HttpClient HttpClient

<MudText Typo="Typo.h3" GutterBottom="true">Select Repositories to analyse</MudText>
<MudDivider Light="true" />
<MudCard>
    <MudCardContent>
        @if (_loading)
        {
            <div class="d-flex flex-column align-center gap-10">
                <MudText Style="text-align:center" Align="Align.Center">Fetching all repositories with your contributions...</MudText>

                <MudProgressCircular Color="Color.Secondary" Size="Size.Large" Indeterminate="true" Class="my-2" />
            </div>
        }
        else
        {
            <MudText Class="mb-5" Typo="Typo.h6">Select at least one repository to analyse</MudText>

            <MudTable Items="@_fetchedRepositories.Repositories"
                  MultiSelection="true"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  Striped="true"
                  Bordered="true"
                  SelectedItems="_selection"
                  SelectedItemsChanged="(HashSet<RepositoryResult> s) => OnSelectionChanged(s)">

                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Your Commits</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Name">@context.RepositoryName</MudTd>
                    <MudTd DataLabel="Your Commits">@context.UserCommits</MudTd>
                </RowTemplate>

            </MudTable>
        }

    </MudCardContent>
    <MudCardActions>
        <MudButton Disabled=!_canSubmit Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="OnSubmit">Analyse</MudButton>

    </MudCardActions>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public UserInfoModel UserInfo { get; set; }

    [Parameter, EditorRequired]
    public Action<string> OnError { get; set; }

    [Parameter, EditorRequired]
    public Action<IEnumerable<string>, string> OnNext { get; set; }

    private bool _canSubmit;

    private HashSet<RepositoryResult> _selection;

    private RepositoriesResultModel _fetchedRepositories;

    private bool _loading;

    public RepositorySelection()
    {
        _loading = true;
    }

    private void OnSelectionChanged(HashSet<RepositoryResult> selection)
    {
        _selection = selection;
        _canSubmit = _selection.Count > 0;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await FetchRepositories();
    }

    private void OnSubmit()
    {
        OnNext(_selection.Select(r => r.Url), _fetchedRepositories.Username);
    }

    private async Task FetchRepositories()
    {
        var errorMessage = $"Failed finding any repositories for {UserInfo.Username}";

        var url = "/find-repositories";
        var response = await HttpClient.HandlePostRequest(url, UserInfo);
        if (response is not null && response.IsSuccessStatusCode)
        {
            var str = await response.Content.ReadAsStringAsync();
            _fetchedRepositories = JsonConvert.DeserializeObject<RepositoriesResultModel>(str);

            if (_fetchedRepositories is null || _fetchedRepositories.Repositories.Count() == 0)
            {
                OnError(errorMessage);
            }
        }
        else
        {
            OnError(errorMessage);
        }
        _fetchedRepositories.Repositories = _fetchedRepositories.Repositories.OrderByDescending(r => r.UserCommits);
        _loading = false;
        StateHasChanged();
    }
}